module Topl.Wallet where

  import DA.Assert
  import DA.Optional
  import Topl.Levels
  import DA.List

  data AcceptedConversation = AcceptedConversation with
    fellowshipIdentifier: Text
    lockTemplateIdentifier: Text
    vk: Optional Text
    party: Party
      deriving (Show, Eq)
    

  template Vault
    with
      owner: Party
      vault: Text
        where
          signatory owner

  template VaultState
    with 
      owner: Party
      operator: Party
      currentPartyIndex: Int
      currentContractIndex: Int
        where
          signatory owner, operator


          key owner : Party
          maintainer key

          choice VaultState_SendFunds: ContractId LvlTransferRequest
            with
              fromPartyIdentifier: Text
              fromContractIdentifier: Text
              requestId: Text
              requestor: Party
              to: Recipient
              fee: Int
              contractParticipants: [ Party ]
            controller requestor
            do
              someInteractionAddress <- lookupByKey @CurrentInteraction (requestor, fromPartyIdentifier, fromContractIdentifier)
              assertMsg "Smart Contract Address does not exist" (isSome someInteractionAddress)
              interactionAddress <- fetch $ fromSome someInteractionAddress
              someInteraction <- lookupByKey @Conversation (operator, interactionAddress.address)
              assert (isSome someInteraction)
              interaction <- fetch $ fromSome someInteraction
              assert (requestor `elem` interaction.canSend)
              exercise (fromSome someInteraction) Conversation_SendFunds with
                ..

          choice VaultState_AcceptInvitation : ContractId WalletFellowship
            with
              invitationAccept: PrivateWalletPartyToAdd
            controller owner
            do
              let newPartyIndex = currentPartyIndex + 1
              create VaultState with 
                currentPartyIndex = newPartyIndex 
                ..
              create WalletFellowship with
                index = newPartyIndex
                identifier = invitationAccept.identifier
                fellows = invitationAccept.fellows
                ..

          choice VaultState_CreateWalletContract : ContractId WalletLockTemplate
            with
              identifier: Text
              lockTemplate: Text
            controller owner
            do
              let newContractIndex = currentContractIndex + 1
              create VaultState with 
                currentContractIndex = newContractIndex 
                ..
              create WalletLockTemplate with
                index = newContractIndex
                lockTemplate = lockTemplate
                identifier = identifier
                ..
          
          nonconsuming choice VaultState_InviteFellowship : [ContractId WalletFellowInvitation]
            with
              invitationUUID: Text
              fellows: [ Party ]
            controller owner
            do
              mapA 
                (\p -> create WalletFellowInvitation with
                  invitedFellows = fellows
                  fellow = p
                  ownerCloudWallet = True
                  ..)
                fellows

          nonconsuming choice VaultState_InviteToConversation: [ContractId WalletConversationInvitation]
            with
              invitationUUID: Text
              fellowshipIdentifier: Text
              lockTemplateIdentifier: Text
              canSend: [ Party ]
              vk: Optional Text
            controller owner
            do
              -- owner can send ==> vk must be set
              assert (owner `notElem` canSend || isSome vk)
              someWalletParty <- lookupByKey @WalletFellowship (owner, fellowshipIdentifier)
              assertMsg "Party not found" (isSome someWalletParty)
              walletParty <- fetch $ fromSome someWalletParty
              someWalletContract <- lookupByKey @WalletLockTemplate (owner, lockTemplateIdentifier)
              assertMsg "Contract not found" (isSome someWalletContract)
              lockTemplate <- fetch $ fromSome someWalletContract
              mapA
                (\p -> create WalletConversationInvitation with
                  invitedFellows = canSend
                  lockTemplate = lockTemplate.lockTemplate
                  party = p
                  ..)
                 canSend
 
  template WalletInvitationAccepted
    with
      owner: Party
      operator: Party
      invitee: Party
      fellows: [ Party ]
      cloudWallet: Bool
        where
          signatory owner, operator
          observer invitee
          -- this is necessary to make sure that other fellows cannot see
          -- the wallet of this party
          choice WalletInvitationAccepted_MakePrivate: ContractId PrivateWalletPartyToAdd
            with
              identifier: Text
            controller invitee
            do
              create PrivateWalletPartyToAdd with
                owner = invitee
                ..


  template PrivateWalletPartyToAdd with
      owner: Party
      identifier: Text
      operator: Party
      fellows: [Party]
      cloudWallet: Bool
        where
          signatory owner, operator

          choice PrivateWalletPartyToAdd_AddParty: ()
            controller operator
            do
              if cloudWallet
                then do
                  (theVaultId, theVault) <- fetchByKey @VaultState owner
                  exercise theVaultId VaultState_AcceptInvitation with
                    invitationAccept = this
                  return ()
                else do
                  return ()



  template WalletInvitationState
    with
      owner: Party
      operator: Party
      invitationUUID: Text
      invitedFellows: [ Party ]
      acceptedFellows: [ Party ]
      ownerCloudWallet: Bool
      cloudWallet: Bool
        where
          signatory owner, operator
          observer invitedFellows, acceptedFellows

          key (owner, invitationUUID): (Party, Text)

          maintainer key._1

          choice WalletInvitationState_Accept : ContractId WalletInvitationState
            with
              fellow: Party
            controller operator
            do
              assertMsg "Party already accepted invitation" (fellow `notElem` acceptedFellows) 
              create this with 
                invitedFellows = filter (/= fellow) invitedFellows
                acceptedFellows = fellow :: acceptedFellows


          choice WalletInvitationState_Distribute: [ ContractId WalletInvitationAccepted ]
            controller operator
            do
              invitedFellows === []
              if owner `notElem` acceptedFellows
                then do
                  ownInvitation <- create WalletInvitationAccepted with
                    invitee = owner
                    fellows = acceptedFellows
                    cloudWallet = ownerCloudWallet
                    ..
                  invitationList <- mapA
                    (\p -> 
                      create WalletInvitationAccepted with
                        invitee = p
                        fellows = acceptedFellows
                        ..)
                    acceptedFellows
                  return (ownInvitation :: invitationList)
                else do
                  mapA
                    (\p -> 
                      create WalletInvitationAccepted with
                        invitee = p
                        fellows = acceptedFellows
                        ..)
                    acceptedFellows

  template CurrentInteraction
    with
      owner: Party
      operator: Party
      fellowshipIdentifier: Text
      lockTemplateIdentifier: Text
      interactionIdentifier: Int
      address: Text
        where
          signatory owner, operator


          key (owner, fellowshipIdentifier, lockTemplateIdentifier): (Party, Text, Text)
          maintainer key._1

          choice InteractionAddress_UpdateState: ContractId CurrentInteraction
            with
              newInteractionIdentifier: Int
              newAddress : Text
            controller operator
            do
              create this with
                interactionIdentifier = newInteractionIdentifier
                address = newAddress

  template Conversation
    with
      operator: Party
      address: Text
      changeAddress: Text
      lockProposition: Text
      lockTemplate: Text
      currentInteraction: Int
      canSend: [ Party ]
      isValid: Bool
      acceptedParties: [ AcceptedConversation ]
        where
          signatory operator
          observer fmap (.party) acceptedParties

          key (operator, address): (Party, Text)
          maintainer key._1

          choice Conversation_SendFunds : ContractId LvlTransferRequest with
              requestId : Text
              requestor: Party
              to: Recipient
              fee: Int
              contractParticipants: [ Party ]
            controller requestor
            do
              assert (requestor `elem` canSend)
              assert isValid
              create this with isValid = False
              create LvlTransferRequest with
                from = SendAddress with ..
                ..
    

          choice Conversaction_UpdateState: ContractId Conversation
            with
              newInteractionIdentifier: Int
              newLock: Text
              newAddress : Text
              newChangeAddress : Text
            controller operator
            do
              res <- mapA
                (\p -> do
                  exerciseByKey @CurrentInteraction (p.party, p.fellowshipIdentifier, p.lockTemplateIdentifier) InteractionAddress_UpdateState with
                    newInteractionIdentifier = newInteractionIdentifier
                    newAddress = newAddress
                  )
                acceptedParties
              create this with
                currentInteraction = newInteractionIdentifier
                address = newAddress
                lockProposition = newLock
                changeAddress = newChangeAddress
                isValid = True
 
  template ConversationInvitationState
    with
      owner: Party
      operator: Party
      invitationUUID: Text
      lockTemplate: Text
      invitedFellows: [ Party ]
      canSend: [ Party ]
      toGetConversation : [ AcceptedConversation ]
      acceptedParties: [ AcceptedConversation ]
        where
          signatory owner, operator
          observer invitedFellows, fmap (.party) acceptedParties

          key (owner, invitationUUID): (Party, Text)

          maintainer key._1

          choice ConversationInvitationState_Accept : ContractId ConversationInvitationState
            with
              party: Party
              fellowshipIdentifier: Text
              lockTemplateIdentifier: Text
              vk: Optional Text
            controller operator
            do
              assertMsg "Fellow already accepted invitation" (party `notElem` fmap (\x -> x.party) acceptedParties) 
              create this with 
                invitedFellows = filter (/= party) invitedFellows
                toGetConversation = (AcceptedConversation with ..) :: toGetConversation
                acceptedParties = (AcceptedConversation with ..) :: acceptedParties


          choice ConversationInvitationState_GetInteraction: ContractId ConversationInvitationState
            with
              requestor: Party
              address: Text
            controller requestor
            do
              invitedFellows === []
              assertMsg "Fellow has already gotten into the conversation" (requestor `elem` fmap (.party) toGetConversation)
              let p = head $ filter (\x -> x.party == requestor) toGetConversation
              create CurrentInteraction with
                                owner = requestor
                                interactionIdentifier = 1
                                fellowshipIdentifier = p.fellowshipIdentifier
                                lockTemplateIdentifier = p.lockTemplateIdentifier
                                address = address
                                ..
              create this with 
                toGetConversation = filter (\x -> x.party /= requestor) toGetConversation
                


          choice ConversationInvitationState_ToInteraction: ContractId Conversation
            with
              address: Text
              changeAddress: Text
              lockProposition: Text
            controller operator
            do
              invitedFellows === []
              toGetConversation === []
              create Conversation with
                currentInteraction = 1
                isValid = True
                ..


  template WalletFellowship
    with
      owner: Party
      identifier: Text
      index: Int
      fellows: [ Party ]
        where
          signatory owner

          key (owner, identifier): (Party, Text)
          maintainer key._1

  template WalletFellowInvitation
    with
      owner: Party
      operator: Party
      invitationUUID: Text
      invitedFellows: [ Party ]
      ownerCloudWallet: Bool
      fellow: Party
        where
          signatory owner, operator

          observer fellow


          choice WalletFellowInvitation_Accept : ContractId WalletInvitationState with
              cloudWallet: Bool
            controller fellow
            do
              someWalletState <- lookupByKey @WalletInvitationState (owner, invitationUUID)
              invitationAccepted <- optional 
                (create WalletInvitationState with
                  owner = owner
                  acceptedFellows = [  ]
                  ..) 
                return
                someWalletState
              exercise invitationAccepted WalletInvitationState_Accept with
               ..

  template WalletConversationInvitation
    with
      owner: Party
      operator: Party
      invitationUUID: Text
      vk : Optional Text
      lockTemplate: Text
      invitedFellows: [ Party ]
      party: Party
      canSend: [ Party ]
        where
          signatory owner, operator

          ensure
            party `elem` canSend

          observer party

          choice WalletConversationInvitation_Accept : ContractId ConversationInvitationState
            with
              fellowshipIdentifier: Text
              lockTemplateIdentifier: Text
            controller party
            do
              someWalletParty <- lookupByKey @WalletFellowship (party, fellowshipIdentifier)
              assertMsg "Party not found" (isSome someWalletParty)
              walletParty <- fetch $ fromSome someWalletParty
              someLockTemaplate <- lookupByKey @WalletLockTemplate (owner, lockTemplateIdentifier)
              assertMsg "Lock Template not found" (isSome someLockTemaplate)
              contract <- fetch $ fromSome someLockTemaplate
              assertMsg "Contract template is not the same" (contract.lockTemplate == lockTemplate)
              someWalletState <- lookupByKey @ConversationInvitationState (owner, invitationUUID)
              invitationAccepted <- optional 
                (create ConversationInvitationState with
                  owner = owner
                  acceptedParties = [  ]
                  toGetConversation = [ ]
                  ..) 
                return
                someWalletState
              exercise invitationAccepted ConversationInvitationState_Accept with
               ..



  template WalletLockTemplate
    with
      owner: Party
      index: Int
      identifier: Text
      lockTemplate: Text
        where
          signatory owner

          key (owner, identifier): (Party, Text)
          maintainer key._1