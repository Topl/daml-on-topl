module Tests.Faucet where

  import Daml.Script
  import Topl.Wallet
  import Topl.Onboarding
  import DA.List
  import DA.Optional
  import Topl.Levels
  import Topl.Utils

  faucet_wallet_init = script do
    operator <- allocateParty "Operator"
    dapp <- allocateParty "Dapp"
    submit dapp do
      createCmd Vault with owner = dapp, vault = "{ xxx }"
    walletCreationRequest <- submit dapp do
      createCmd WalletCreationRequest with 
        owner = dapp
        ..
    dappVaultState <- submit operator do
      exerciseCmd walletCreationRequest WalletCreationRequest_Accept
    -- now the dapp needs to create a fellowship with itself
    invitations <- submit dapp do
      exerciseCmd dappVaultState VaultState_InviteFellowship with
        invitationUUID = "xxx"
        fellows = [dapp]
    let selfInvitation = head invitations
    invitationState <- submit dapp do
      exerciseCmd selfInvitation WalletFellowInvitation_Accept with 
        cloudWallet = True
    invitationsAccepted <- submit operator do
      exerciseCmd invitationState WalletInvitationState_Distribute
    let invitationAccepted = head invitationsAccepted
    privateWalletPartyToAdd <- submit dapp do
      exerciseCmd invitationAccepted WalletInvitationAccepted_MakePrivate with
        identifier = "self"
    submit operator do
      exerciseCmd privateWalletPartyToAdd PrivateWalletPartyToAdd_AddParty
    -- now we create the contract
    someDappVaultState <- queryContractKey @VaultState dapp dapp
    submit dapp do
      exerciseCmd (fst $ fromSome someDappVaultState) VaultState_CreateWalletContract with
        identifier = "default"
        lockTemplate = "threshold(sign(0), 1)"
    -- finally we create an interaction with ourselves
    someDappVaultState <- queryContractKey @VaultState dapp dapp
    walletConversationInvitations <- submit dapp do
      exerciseCmd (fst $ fromSome someDappVaultState) VaultState_InviteToConversation with
        invitationUUID = "yyy"
        fellowshipIdentifier = "self"
        lockTemplateIdentifier = "default"
        canSend = [ dapp ]
        vk = Some "zzz"
    let walletConversationInvitation = head walletConversationInvitations
    walletConversationInvitationState <- submit dapp do
      exerciseCmd walletConversationInvitation WalletConversationInvitation_Accept with
        fellowshipIdentifier = "self"
        lockTemplateIdentifier = "default"
    walletConversationInvitationState <- submit dapp do
      exerciseCmd walletConversationInvitationState ConversationInvitationState_GetInteraction with
        requestor = dapp
        address = "www"
        vk = "vk"
    submit operator do
      exerciseCmd walletConversationInvitationState ConversationInvitationState_ToInteraction with
        address = "www"
        changeAddress = "aaa"
        lockProposition = "someLock"
    return (operator, dapp)

  send_amount_to_alice = script do
    (operator, dapp) <- faucet_wallet_init
    alice <- allocateParty "alice"
    someDappVaultState <- queryContractKey @VaultState dapp dapp
    let vaultState = fst $ fromSome someDappVaultState
    txRequest <- submit dapp do
      exerciseCmd vaultState VaultState_SendFunds with
        fromPartyIdentifier = "self"
        fromContractIdentifier = "default"
        requestId = "xxx"
        requestor = dapp
        fee = 10
        to = Recipient with address = "aliceAddress", amount = 100
        contractParticipants = [ dapp ]
    txRequestData <- queryContractId dapp txRequest
    unprovedTx <- submit operator do
      exerciseCmd txRequest LvlTransferRequest_Accept with
        unprovedTx = "unprovedTx"
    unprovedTx <- submit dapp do
      exerciseCmd unprovedTx LvlTransferUnproved_Prove with
        prover = dapp
        provedTx = "provedTx"
    proovedTx <- submit operator do
      exerciseCmd unprovedTx LvlTransferUnproved_ProofCompleted with
    t <- getTime
    proovedTx <- submit operator do
      exerciseCmd proovedTx LvlTransferProved_Sent with
        newSendStatus = Sent with
                              when = t
                              from = "XXXX"
                              txId = "YYYYY"
    proovedTx <- submit operator do
      exerciseCmd proovedTx LvlTransferProved_Confirm with
                              txId = "YYYYY"
                              depth = 1
    -- now some trigger should capture the 
    -- confirmed transaction and update the smart contract
    let fromAddress = (fromSome txRequestData).from.address
    someInteraction <- queryContractKey @Conversation operator (operator, fromAddress)
    submit operator do
      exerciseCmd (fst $ fromSome someInteraction) Conversaction_UpdateState with
        newVk = "newVk"
        newLock = "newLock"
        newAddress = "newAddress"
        newChangeAddress = "newChangeAddress"
    return ()