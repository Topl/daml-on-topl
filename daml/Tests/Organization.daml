module Tests.Organization where
    
    import Daml.Script
    import Topl.Onboarding
    import Topl.Organization
    import DA.Optional

    -- test adding members to the organization

    -- simple add: we add one member to the org
    org_add_one_member_test = script do
        operator <- allocateParty "Operator"
        alice <- allocateParty "Alice"
        operatorCid <- submit operator do
            createCmd Operator with operator = operator, address = "XXXX"
        org <- submit operator do
            exerciseCmd operatorCid Operator_CreateOrganization with orgName = "Topl"
        membershiptOffer <- submit operator do
            exerciseCmd org Organization_InviteMember with invitee = alice
        org <- submit alice do
            exerciseCmd membershiptOffer Membershp_Accept
        someOrgData <-  queryContractId @Organization alice org
        assert (alice `elem` (fromSome someOrgData).members)
        assert (alice `notElem` (fromSome someOrgData).wouldBeMembers)


    -- add more than one: we add two members to the org, one after the other
    org_add_two_member_test = script do
        operator <- allocateParty "Operator"
        alice <- allocateParty "Alice"
        bob <- allocateParty "Bob"
        operatorCid <- submit operator do
            createCmd Operator with operator = operator, address = "XXXX"
        org <- submit operator do
            exerciseCmd operatorCid Operator_CreateOrganization with orgName = "Topl"
        membershiptOffer <- submit operator do
            exerciseCmd org Organization_InviteMember with invitee = alice
        org <- submit alice do
            exerciseCmd membershiptOffer Membershp_Accept
        membershiptOffer <- submit operator do
            exerciseCmd org Organization_InviteMember with invitee = bob
        org <- submit bob do
            exerciseCmd membershiptOffer Membershp_Accept
        someOrgData <-  queryContractId @Organization alice org
        assert (alice `elem` (fromSome someOrgData).members)
        assert (alice `notElem` (fromSome someOrgData).wouldBeMembers)
        assert (bob `elem` (fromSome someOrgData).members)
        assert (bob `notElem` (fromSome someOrgData).wouldBeMembers)
    
    -- add more than one: we add two members to the org, the membership invitation needs to be recreated
    org_add_two_member_concurrently_test = script do
        operator <- allocateParty "Operator"
        alice <- allocateParty "Alice"
        bob <- allocateParty "Bob"
        operatorCid <- submit operator do
            createCmd Operator with operator = operator, address = "XXXX"
        org <- submit operator do
            exerciseCmd operatorCid Operator_CreateOrganization with orgName = "Topl"
        membershiptOfferAlice <- submit operator do
            exerciseCmd org Organization_InviteMember with invitee = alice
        newOrg <- queryContractKey @Organization operator (operator, "Topl")
        membershiptOfferBob <- submit operator do
            exerciseCmd (fromSome newOrg)._1 Organization_InviteMember with invitee = bob
        org <- submit alice do
            exerciseCmd membershiptOfferAlice Membershp_Accept
        -- after each new member is added the operator must update the environment, this is required to update the invitations, assets, Ious, etc that belong to the organization
        -- we need this step because if this is performed by a user, it will fail. Indeed, each user does not have the right to see the membership invitation
        submit operator do
            exerciseCmd org Organization_UpdateEnvironment
        someMembershipOfferForBob <-  queryContractKey @MembershipOffer operator (operator, bob, "Topl")
        org <- submit bob do
            exerciseCmd (fromSomeNote "No offer found for Bob" someMembershipOfferForBob)._1 Membershp_Accept
        org <- submit operator do
            exerciseCmd org Organization_UpdateEnvironment
        someOrgData <-  queryContractId @Organization operator org
        assert (alice `elem` (fromSomeNote "No org data" someOrgData).members)
        assert (alice `notElem` (fromSome someOrgData).wouldBeMembers)
        assert (bob `elem` (fromSome someOrgData).members)
        assert (bob `notElem` (fromSome someOrgData).wouldBeMembers)
        


