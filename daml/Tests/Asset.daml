module Tests.Asset where
    import Daml.Script
    import Tests.Organization
    import Topl.Organization
    import Topl.Asset
    import DA.Optional
    import DA.List
    import DA.Assert
    import Topl.Utils

    org_create_asset_creator_test = script do
        -- we can reuse previous tests, this one creates two users in an organization
        (operator, alice, bob) <- org_add_two_member_test
        someOrg <- queryContractKey @Organization operator (operator, "Topl")
        let orgId = (fromSome someOrg)._1
        let org = (fromSome someOrg)._2
        org <- submit alice do 
            exerciseCmd orgId Organization_CreateAsset with
                requestor = alice
                version = 1
                shortName = "Wheat"
        return (operator, alice, bob, org)
        -- now we create an asset creator

    asset_creator_mint_asset = script do
        (operator, alice, bob, org) <- org_create_asset_creator_test
        someOrg <- queryContractKey @Organization operator (operator, "Topl")
        let orgId = (fromSome someOrg)._1
        let org = (fromSome someOrg)._2
        someAssetCreator <- queryContractKey @AssetCreator operator (operator, "Topl", head org.assetCodes)
        let assetCreatorCid = (fromSome someAssetCreator)._1
        assetMintingRequestCid <- submit alice do 
            exerciseCmd assetCreatorCid MintAsset with
                requestor = alice
                quantity = 10
                someCommitRoot = Some "XXXX"
                someMetadata = Some "YYYY"
                someFee = None
        unsignedAssetMintingCid <- submit operator do
            exerciseCmd assetMintingRequestCid MintingRequest_Accept with
                txToSign = "ZZZZ"
        signedAssetMintingCreated <- submit operator do
            exerciseCmd unsignedAssetMintingCid UnsignedMinting_Sign with
                signedMintTx = "WWWWW"
        t <- getTime
        signedAssetMintingSentCid <- submit operator do
            exerciseCmd signedAssetMintingCreated SignedAssetMinting_Sent 
                with
                    newSendStatus = Sent with
                                        when = t
                                        from = "XXXX"
                                        txHash = None
        signedAssetMintingCid <- submit operator do 
            exerciseCmd signedAssetMintingSentCid SignedAssetMinting_Confirm with
                txId = "XXXXX"
                depth = 1
        signedAssetMinting <- queryContractId operator signedAssetMintingCid
        assetIou <- submit operator do
            exerciseCmd orgId Organization_AddSignedAssetMinting with
                signedAssetMintingCid = signedAssetMintingCid
        someAssetIou <- queryContractId @AssetIou operator assetIou
        (fromSome someAssetIou).someMetadata === (Some "YYYY")
        (fromSome someAssetIou).someCommitRoot === (Some "XXXX")
        return (operator, alice, bob, assetIou)

    asset_creator_transfer_asset = script do
        (operator, alice, bob, assetIou)  <- asset_creator_mint_asset
        assetTransferRequestCid <- submit alice do
            exerciseCmd assetIou AssetIou_UpdateAsset with
                requestor = alice
                newCommitRoot = Some "WWWW"
                newMetadata = Some "VVVVV"
                someFee = None
        unsignedAssetTransferCid <- submit operator do
            exerciseCmd assetTransferRequestCid AssetTransferRequest_Accept with
                txToSign = "ZZZZ"
        signedAssetTransferCreated <- submit operator do
            exerciseCmd unsignedAssetTransferCid UnsignedAssetTransfer_Sign with
                signedTx = "WWWWW"
        t <- getTime
        signedAssetTransferSentCid <- submit operator do
            exerciseCmd signedAssetTransferCreated SignedAssetTransfer_Sent 
                with
                    newSendStatus = Sent with
                                        when = t
                                        from = "XXXX"
                                        txHash = None
        signedAssetTransferCid <- submit operator do 
            exerciseCmd signedAssetTransferSentCid SignedAssetTransfer_Confirm with
                txId = "XXXXX"
                depth = 1
        someSignedAssetTransferCid <- queryContractId operator signedAssetTransferCid
        someOrg <- queryContractKey @Organization operator (operator, "Topl")
        let orgId = (fromSome someOrg)._1
        let org = (fromSome someOrg)._2
        assetIou <- submit operator do
            exerciseCmd orgId Organization_AddSignedAssetTransfer with
                signedAssetTransferCid = signedAssetTransferCid
        someAssetIou <- queryContractId @AssetIou operator assetIou
        (fromSome someAssetIou).someMetadata === (Some "VVVVV")
        (fromSome someAssetIou).someCommitRoot === (Some "WWWW")
        return (operator, alice, bob, assetIou) 

    operator_cannot_transfer_asset = script do
        (operator, alice, bob, assetIou)  <- asset_creator_mint_asset
        submitMustFail operator do
            exerciseCmd assetIou AssetIou_UpdateAsset with
                requestor = operator
                newCommitRoot = Some "WWWW"
                newMetadata = Some "VVVVV"
                someFee = None
    operator_cannot_impersonate_member_transfer_asset = script do
        (operator, alice, bob, assetIou)  <- asset_creator_mint_asset
        submitMustFail operator do
            exerciseCmd assetIou AssetIou_UpdateAsset with
                requestor = alice
                newCommitRoot = Some "WWWW"
                newMetadata = Some "VVVVV"
                someFee = None
