module Topl.Levels where

  import DA.Assert
  import Topl.Utils
  import DA.Optional

  type Address = Text

  data SendAddress = SendAddress
    with
      address: Address
      lock: Text
        deriving (Show, Eq)

  data Recipient = Recipient
    with
      address: Address
      amount: Int
        deriving (Show, Eq)

  template LvlTransferRejected
    with 
      requestId: Text
      requestor: Party
      operator: Party
      contractParticipants: [ Party ]
      reason: Text
        where
          signatory requestor, operator
          observer contractParticipants

          key (operator, requestId) : (Party, Text)

          maintainer key._1

          choice LvlTransferRejected_Archive: ()
            controller operator
            do
              return ()

  template LvlTransferRequest
    with 
      requestId: Text
      requestor: Party
      operator: Party
      from: [ SendAddress ]
      to: [ Recipient ]
      changeAddress: Address
      contractParticipants: [ Party ]
        
        where
          signatory requestor
          observer operator, contractParticipants

          key (requestor, requestId) : (Party, Text)

          maintainer key._1

          choice LvlTransferRequest_Accept: ContractId LvlTransferUnproved
            with
              unprovedTx: Text
            controller operator
            do
              create LvlTransferUnproved with provedBy = [], proofStatus = PendingProof, someProvedTx = None, ..

          choice LvlTransferRequest_Reject: ContractId LvlTransferRejected
            with
              reason: Text
            controller operator
            do
              create LvlTransferRejected with ..


  template LvlTransferUnproved
    with 
      requestId: Text
      requestor: Party
      operator: Party
      proofStatus: ProveStatus
      provedBy: [ Party ]
      contractParticipants: [ Party ]
      unprovedTx: Text
      someProvedTx   : Optional Text
        where
          signatory requestor, operator
          observer contractParticipants

          key (operator, requestId) : (Party, Text)

          maintainer key._1

          choice LvlTransferUnproved_ProofCompleted: ContractId LvlTransferProved
            controller operator
            do
              proofStatus === ToValidate
              let provedTx = fromSome someProvedTx
              create LvlTransferProved with sendStatus = Pending, ..
 
          choice LvlTransferUnproved_ProofIncomplete: ContractId LvlTransferUnproved
            controller operator
            do
              create this with proofStatus = PendingProof

          choice LvlTransferUnproved_Prove: ContractId LvlTransferUnproved
            with
              prover: Party
              provedTx   : Text
            controller prover
            do
              assert (prover `elem` contractParticipants)
              assert (prover `notElem` provedBy)

              create LvlTransferUnproved with proofStatus = ToValidate, someProvedTx = Some provedTx, ..

          choice LvlTransferUnproved_Reject: ContractId LvlTransferRejected
            with
              reason: Text
            controller operator
            do
              create LvlTransferRejected with ..


  template LvlTransferProved
    with 
      requestId: Text
      requestor: Party
      operator: Party
      unprovedTx: Text
      provedTx   : Text
      contractParticipants: [ Party ]
      sendStatus : SendStatus
        where
          signatory requestor, operator
          observer contractParticipants

          key (operator, requestId) : (Party, Text)

          maintainer key._1

          choice LvlTransferProved_Archive : ()
              controller operator
              do 
                  return ()


          choice LvlTransferProved_Sent : ContractId LvlTransferProved
              with    newSendStatus : SendStatus
              controller operator
              do 
                  sendStatus === Pending
                  create this with sendStatus = newSendStatus


          choice LvlTransferProved_Confirm : ContractId LvlTransferProved
              with
                  txId : Text
                  depth : Int
              controller operator
                  do
                      assert (isSent sendStatus)
                      create this with
                          sendStatus = Confirmed 
                              with ..
          choice LvlTransferProved_Fail : ContractId LvlTransferProved
                  with    reason : Text
              controller operator
              do 
                  create this with sendStatus = FailedToSend with ..