module Standard.ERC20FixedSupply where

import Standard.ERC20
import Topl.Asset
import Topl.Utils
import DA.List
import DA.Map qualified as M

template ERC20FixedSupplyMinter with
    operator: Party
    operatorAddress : Text
    public : Party
        where
            signatory operator

            observer public

            nonconsuming choice Issue : ContractId ERC20FixedSupplyRequest
                with
                    requestId : Text
                    issuer : Party
                    issuerAddress : Text
                    name : Optional Text
                    symbol : Text
                    totalSupply : Int
                controller issuer
                do
                    -- this will launch the asset minting process
                    create UniqueAssetMintingRequest with
                        requestor = issuer
                        to = [ (issuerAddress, totalSupply) ]
                        quantity = totalSupply
                        someCommitRoot = None
                        someMetadata = None
                        shortName = symbol
                        fee = 100
                        ..
                    -- this will be used later to capture the UniqueAssetMintingRequest
                    -- and create the ERC20 contract
                    create ERC20FixedSupplyRequest with ..

template ERC20FixedSupplyRequest with
            requestId : Text
            issuer: Party
            operator: Party
            operatorAddress: Text
            public : Party
            name : Optional Text
        where
            signatory issuer, operator

            choice Tokens_To_ERC_20: ContractId ERC20
                controller operator
                do
                    (assetMintingCid, assetMinting) <- fetchByKey @SignedAssetMinting (operator, requestId)
                    assert $ isConfirmed assetMinting.sendStatus
                    let issuerAddress = fst $ head assetMinting.to
                    erc20 <- create ERC20 with
                       issuer = assetMinting.requestor
                       public = public
                       symbol = assetMinting.assetCode.shortName
                       totalSupply = assetMinting.quantity
                       assetCode = assetMinting.assetCode
                       ..
                    exercise assetMintingCid SignedAssetMinting_Archive
                    -- we create the initial account where the tokens are
                    -- stored
                    create Account with 
                        owner = issuer
                        symbol = assetMinting.assetCode.shortName
                        balance = assetMinting.quantity
                        address = issuerAddress
                        allowances = M.empty
                        someTransferringTo = None
                        ..
                    return erc20
